local Util = require(game.ServerScriptService.Tests.util)

return function()
    local AVL = require(game.ServerScriptService.RankStore.avl)
    
    beforeEach(function()
        expect.extend(Util.GetExpectationExtensions())
    end)

    afterEach(function()
        print("test completed...")
    end)

    local function assertAvlIntegrity(tree)
        assert(AVL._GetBalance(tree.Root) <= 1)
    end
    
    describe("Test AVL Tree", function()
        it("TestNew", function()
            local tree = AVL.New()
        end)

        it("TestNewWithData", function()
            local tree = AVL.New({{4, "a"}, {3, "b"}, {5, "c"}, {1, "d"}, {2, "e"}})
            expect(tree:GetSize()).to.be.equal(5)
            assertAvlIntegrity(tree)
        end)

        it("TestNewFromOrderedData", function()
            local tree = AVL.FromOrderedArray({{1, "a"}, {2, "b"}, {3, "c"}, {4, "d"}, {5, "e"}})
            expect(tree:GetSize()).to.be.equal(5)
            assertAvlIntegrity(tree)
        end)

        -- this should still work but will be slow.
        it("TestNewFromOrderedData unordered data", function()
            local tree = AVL.FromOrderedArray({{4, "a"}, {3, "b"}, {5, "c"}, {1, "d"}, {2, "e"}})
            expect(tree:GetSize()).to.be.equal(5)
            assertAvlIntegrity(tree)

            expect(tree:Get(5, "c").Extra).to.be.equal("c")
        end)

        it("TestInsertOne", function()
            local tree = AVL.New()
            local node = tree:Insert(3, "a")
            expect(node.Value).to.be.equal(3)
            expect(tree:GetSize()).to.be.equal(1)
            expect(tree:Get(3, "a").Value).to.be.equal(3)
            expect(tree:Get(3, "a").Extra).to.be.equal("a")
            assertAvlIntegrity(tree)
        end)

        it("TestInsertRemoveOne", function()
            local tree = AVL.New()
            tree:Insert(3, "a")
            local node, prevRank = tree:Remove(3, "a")
            expect(node.Value).to.be.equal(3)
            expect(prevRank).to.be.equal(1)
            expect(tree:GetSize()).to.be.equal(0)
            expect(tree:Get(3, "a")).to.be.equal(nil)
        end)

        it("TestGetMissing", function()
            local tree = AVL.New()
            expect(tree:Get(3, "a")).to.be.equal(nil)
        end)

        it("TestGetInsertRank", function()
            local tree = AVL.New()
            tree:Insert(1, "d")
            tree:Insert(2, "c")
            tree:Insert(3, "a")
            tree:Insert(5, "b")
            tree:Insert(7, "e")

            expect(tree:GetInsertRank(0.5)).to.be.equal(1)
            expect(tree:GetInsertRank(1.5)).to.be.equal(2)
            expect(tree:GetInsertRank(2.5)).to.be.equal(3)
            expect(tree:GetInsertRank(4)).to.be.equal(4)
            expect(tree:GetInsertRank(8)).to.be.equal(6)
        end)

        it("TestInsert", function()
            local tree = AVL.New()
            _, rank = tree:Insert(3, "a")
            expect(rank).to.be.equal(1)
            _, rank = tree:Insert(5, "b")
            expect(rank).to.be.equal(2)
            _, rank = tree:Insert(2, "c")
            expect(rank).to.be.equal(1)
            _, rank = tree:Insert(1, "d")
            expect(rank).to.be.equal(1)
            _, rank = tree:Insert(7, "e")
            expect(rank).to.be.equal(5)

            expect(tree:GetSize()).to.be.equal(5)

            assertAvlIntegrity(tree)

            expect(tree:Get(5, "b").Extra).to.be.equal("b")
            expect(tree:Get(3, "a").Extra).to.be.equal("a")
            expect(tree:Get(2, "c").Extra).to.be.equal("c")
            expect(tree:Get(1, "d").Extra).to.be.equal("d")
            expect(tree:Get(7, "e").Extra).to.be.equal("e")

            expect(tree:GetIndex(1).Extra).to.be.equal("d")
            expect(tree:GetIndex(2).Extra).to.be.equal("c")
            expect(tree:GetIndex(3).Extra).to.be.equal("a")
            expect(tree:GetIndex(4).Extra).to.be.equal("b")
            expect(tree:GetIndex(5).Extra).to.be.equal("e")
        end)

        it("TestGetIndex", function()
            local tree = AVL.New()
            tree:Insert(3, "a")
            tree:Insert(5, "b")
            tree:Insert(2, "c")
            tree:Insert(1, "d")
            tree:Insert(7, "e")

            expect(tree:GetIndex(1).Extra).to.be.equal("d")
            expect(tree:GetIndex(2).Extra).to.be.equal("c")
            expect(tree:GetIndex(3).Extra).to.be.equal("a")
            expect(tree:GetIndex(4).Extra).to.be.equal("b")
            expect(tree:GetIndex(5).Extra).to.be.equal("e")

            expect(tree:GetIndex(1, true).Extra).to.be.equal("e")
            expect(tree:GetIndex(2, true).Extra).to.be.equal("b")
            expect(tree:GetIndex(3, true).Extra).to.be.equal("a")
            expect(tree:GetIndex(4, true).Extra).to.be.equal("c")
            expect(tree:GetIndex(5, true).Extra).to.be.equal("d")
        end)

        it("TestGetSize", function()
            local tree = AVL.New()
            tree:Insert(3, "a")
            tree:Insert(5, "b")
            tree:Insert(2, "c")
            tree:Insert(1, "d")
            tree:Insert(7, "e")
            expect(tree:GetSize()).to.be.equal(5)

        end)

        it("TestRemoveOne", function()
            local tree = AVL.New()
            tree:Insert(3, "a")
            tree:Remove(3, "a")
            expect(tree:GetSize()).to.be.equal(0)
            expect(tree:Get(3, "a")).to.be.equal(nil)
        end)

        it("TestRemoveMissing", function()
            local tree = AVL.New()
            tree:Insert(3, "a")
            expect(tree:Remove(4)).to.be.equal(nil)

            tree:Insert(3, "a")
            expect(tree:Remove(3, "b")).to.be.equal(nil)
        end)

        it("TestRemove", function()
            local tree = AVL.New()
            tree:Insert(3, "a")
            tree:Insert(5, "b")
            tree:Insert(2, "c")
            tree:Insert(1, "d")
            tree:Insert(7, "e")

            _, rank = tree:Remove(3, "a")
            expect(rank).to.be.equal(3)

            expect(tree:GetSize()).to.be.equal(4)
            expect(tree:Get(3, "a")).to.be.equal(nil)
            expect(tree:Get(5, "b").Extra).to.be.equal("b")
            expect(tree:Get(2, "c").Extra).to.be.equal("c")
            expect(tree:Get(1, "d").Extra).to.be.equal("d")
            expect(tree:Get(7, "e").Extra).to.be.equal("e")
        end)

        it("TestIterator", function()
            local tree = AVL.New()
            tree:Insert(3, "a")
            tree:Insert(5, "b")
            tree:Insert(2, "c")
            tree:Insert(1, "d")
            tree:Insert(7, "e")
            
            local iterator = tree:Iterator()
            expect(iterator().Value).to.be.equal(1)
            expect(iterator().Value).to.be.equal(2)
            expect(iterator().Value).to.be.equal(3)
            expect(iterator().Value).to.be.equal(5)
            expect(iterator().Value).to.be.equal(7)
            expect(iterator()).to.be.equal(nil)

            local reverseIterator = tree:Iterator(true)
            expect(reverseIterator().Value).to.be.equal(7)
            expect(reverseIterator().Value).to.be.equal(5)
            expect(reverseIterator().Value).to.be.equal(3)
            expect(reverseIterator().Value).to.be.equal(2)
            expect(reverseIterator().Value).to.be.equal(1)
            expect(reverseIterator()).to.be.equal(nil)
        end)

        it("TestDuplicateValue", function()
            local tree = AVL.New()
            tree:Insert(3, "a")
            tree:Insert(3, "b")
            expect(tree:GetSize()).to.be.equal(2)
            expect(tree:Get(3, "b").Extra).to.be.equal("b")
            expect(tree:Get(3, "a").Extra).to.be.equal("a")

            tree:Remove(3, "a")
            expect(tree:GetSize()).to.be.equal(1)
            expect(tree:Get(3, "b").Extra).to.be.equal("b")
            expect(tree:Get(3, "a")).to.be.equal(nil)

            local tree = AVL.New()
            tree:Insert(3, "b")
            tree:Insert(3, "a")
            expect(tree:GetSize()).to.be.equal(2)
            expect(tree:Get(3, "b").Extra).to.be.equal("b")
            expect(tree:Get(3, "a").Extra).to.be.equal("a")

        end)
    end)
end